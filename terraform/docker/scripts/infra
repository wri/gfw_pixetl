#!/bin/bash

function usage {
  echo -n \
    "Usage: $(basename "$0") COMMAND OPTION[S]
Execute Terraform subcommands.
"
}

set -e

if [[ -n "${GFW_TERRAFORM_DEBUG}" ]]; then
  set -x
fi

if [ -z "${ENV}" ]; then
  ENV=dev
fi

if [ -f "/root/.aws/credentials" ]; then
    export AWS_PROFILE=gfw-${ENV}
    unset AWS_ACCESS_KEY_ID
    unset AWS_SECRET_ACCESS_KEY
    unset AWS_DEFAULT_REGION

    echo "Using enviroment ${ENV} and AWS_PROFILE ${AWS_PROFILE}"
else
  echo "Using enviroment ${ENV} and AWS_ACCESS_KEY_ID"
fi


# extracting workspace argument if exists
POSITIONAL=()
WORKSPACE=""
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -w|--workspace)
    WORKSPACE="$2"
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters


# Run Terraform
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
  if [ "${1:-}" = "--help" ]; then
    usage
  else

    TERRAFORM_DIR="/usr/local/src/terraform"
    pushd "${TERRAFORM_DIR}"

    case "${1}" in
    fmt)
      terraform fmt -recursive .
      ;;
    init)
      echo "Initializing terraform ..."
      shift
      # Clear stale modules, then re-initialize
      rm -rf .terraform
      terraform init \
        -backend-config=vars/backend-${ENV}.tfvars
      select_workspace "${WORKSPACE}"
      ;;
    doc)
      echo "Starting terraform documentation..."
      shift
      # Clear stale modules, then re-initialize
      rm -rf .terraform
      # select or create the current workspace
      echo "Terraform documentation - Running pre-doc init"
      terraform init \
        -backend-config=vars/backend-${ENV}.tfvars
      select_workspace "${WORKSPACE}"
      echo "Terraform documentation - Running terraform-docs"
      terraform-docs markdown table . > ../terraform.md
      ;;
    plan)
      echo "Starting terraform plan..."
      shift
      # Clear stale modules, then re-initialize
      rm -rf .terraform
      # select or create the current workspace
      echo "Terraform plan - Running pre-plan init"
      terraform init \
        -backend-config=vars/backend-${ENV}.tfvars
      select_workspace "${WORKSPACE}"
      echo "Terraform plan - Running plan"
      terraform plan \
        -var-file="vars/terraform-${ENV}.tfvars" \
        -out="terraform.tfplan" \
        "$@"
      echo "Terraform plan finished."
      ;;
    apply)
      shift
      echo "Starting terraform apply..."
      terraform apply \
        "terraform.tfplan" \
        "$@"
      echo "Terraform apply finished."
      ;;
    destroy)
      shift
      echo "Starting terraform destroy..."
      select_workspace "${WORKSPACE}"
      terraform destroy \
        -var-file="vars/terraform-${ENV}.tfvars" \
        -auto-approve \
        "$@"
      echo "Terraform destroy finished."
      ;;
    *)
      echo "ERROR: I don't have support for that Terraform subcommand!"
      exit 1
      ;;
    esac

    popd
  fi
fi
